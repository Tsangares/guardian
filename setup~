#!/bin/bash
# VPN Gateway Router Setup Script for Raspberry Pi / Armbian
# Creates a WiFi AP that routes all traffic through a VPN tunnel
#
# Usage: sudo ./setup-vpn-gateway.sh

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration variables (will be set interactively)
AP_INTERFACE=""
WAN_INTERFACE=""
AP_SSID=""
AP_PASSWORD=""
AP_SUBNET="192.168.50"
VPN_TYPE=""
WG_SERVER_PUBLIC_KEY=""
WG_SERVER_ENDPOINT=""
WG_CLIENT_PRIVATE_KEY=""
WG_CLIENT_ADDRESS=""

# Logging
LOG_FILE="/var/log/vpn-gateway-setup.log"

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
    fi
}

# Detect interfaces
detect_interfaces() {
    log "Detecting network interfaces..."
    
    echo ""
    echo "Available network interfaces:"
    ip -brief link show | grep -v "lo" | nl
    echo ""
    
    # Get AP interface
    read -p "Enter the interface for Access Point (e.g., wlx98038eb6c140): " AP_INTERFACE
    if ! ip link show "$AP_INTERFACE" &> /dev/null; then
        error "Interface $AP_INTERFACE not found"
    fi
    
    # Get WAN interface
    read -p "Enter the interface connected to Internet (e.g., wlan0): " WAN_INTERFACE
    if ! ip link show "$WAN_INTERFACE" &> /dev/null; then
        error "Interface $WAN_INTERFACE not found"
    fi
    
    # Verify AP interface supports AP mode
    if ! iw phy$(iw dev "$AP_INTERFACE" info | grep wiphy | awk '{print $2}') info | grep -q "* AP"; then
        warn "Interface $AP_INTERFACE may not support AP mode. Continuing anyway..."
    fi
    
    log "AP Interface: $AP_INTERFACE"
    log "WAN Interface: $WAN_INTERFACE"
}

# Get AP configuration
get_ap_config() {
    log "Configuring Access Point settings..."
    
    read -p "Enter AP SSID (network name): " AP_SSID
    while true; do
        read -s -p "Enter AP password (min 8 characters): " AP_PASSWORD
        echo
        if [[ ${#AP_PASSWORD} -ge 8 ]]; then
            break
        else
            warn "Password must be at least 8 characters"
        fi
    done
    
    read -p "Enter AP subnet (default: 192.168.50): " subnet_input
    AP_SUBNET="${subnet_input:-192.168.50}"
}

# Get VPN configuration
get_vpn_config() {
    log "Configuring VPN settings..."
    
    echo ""
    echo "Select VPN type:"
    echo "1) WireGuard (recommended - fast, lightweight)"
    echo "2) OpenVPN (more compatible)"
    read -p "Choice [1]: " vpn_choice
    vpn_choice="${vpn_choice:-1}"
    
    if [[ "$vpn_choice" == "1" ]]; then
        VPN_TYPE="wireguard"
        setup_wireguard_config
    else
        VPN_TYPE="openvpn"
        setup_openvpn_config
    fi
}

setup_wireguard_config() {
    echo ""
    echo "WireGuard Configuration:"
    echo "You need: VPN server endpoint, server public key, and client private key"
    echo ""
    
    read -p "Do you already have WireGuard keys? [y/N]: " has_keys
    
    if [[ "$has_keys" =~ ^[Yy]$ ]]; then
        read -p "Enter your VPN server endpoint (e.g., vpn.example.com:51820): " WG_SERVER_ENDPOINT
        read -p "Enter VPN server public key: " WG_SERVER_PUBLIC_KEY
        read -p "Enter your client private key: " WG_CLIENT_PRIVATE_KEY
        read -p "Enter your client VPN IP (e.g., 10.66.66.2/24): " WG_CLIENT_ADDRESS
    else
        log "Generating new WireGuard keys..."
        WG_CLIENT_PRIVATE_KEY=$(wg genkey)
        WG_CLIENT_PUBLIC_KEY=$(echo "$WG_CLIENT_PRIVATE_KEY" | wg pubkey)
        
        echo ""
        echo "Generated keys:"
        echo "Private Key: $WG_CLIENT_PRIVATE_KEY"
        echo "Public Key: $WG_CLIENT_PUBLIC_KEY"
        echo ""
        echo "You need to add this public key to your VPN server!"
        echo ""
        
        read -p "Enter your VPN server endpoint (e.g., vpn.example.com:51820): " WG_SERVER_ENDPOINT
        read -p "Enter VPN server public key: " WG_SERVER_PUBLIC_KEY
        read -p "Enter your client VPN IP (e.g., 10.66.66.2/24): " WG_CLIENT_ADDRESS
    fi
}

setup_openvpn_config() {
    echo ""
    read -p "Enter path to OpenVPN config file (.ovpn): " OVPN_CONFIG
    if [[ ! -f "$OVPN_CONFIG" ]]; then
        error "OpenVPN config file not found: $OVPN_CONFIG"
    fi
}

# Install required packages
install_packages() {
    log "Installing required packages..."
    
    # Update package list
    apt-get update -qq
    
    # Install base packages
    PACKAGES="hostapd dnsmasq iptables-persistent"
    
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        PACKAGES="$PACKAGES wireguard wireguard-tools"
    else
        PACKAGES="$PACKAGES openvpn"
    fi
    
    apt-get install -y $PACKAGES
    
    log "Packages installed successfully"
}

# Configure hostapd
configure_hostapd() {
    log "Configuring hostapd..."
    
    # Backup existing config
    [[ -f /etc/hostapd/hostapd.conf ]] && cp /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.conf.backup
    
    # Create hostapd config
    cat > /etc/hostapd/hostapd.conf <<EOF
# Interface configuration
interface=$AP_INTERFACE
driver=nl80211

# Wireless settings
ssid=$AP_SSID
hw_mode=g
channel=6
ieee80211n=1
wmm_enabled=1

# Security settings
auth_algs=1
wpa=2
wpa_passphrase=$AP_PASSWORD
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP

# Logging
logger_syslog=-1
logger_syslog_level=2
logger_stdout=-1
logger_stdout_level=2
EOF
    
    chmod 600 /etc/hostapd/hostapd.conf
    
    # Set hostapd to use our config
    if [[ -f /etc/default/hostapd ]]; then
        sed -i 's|#DAEMON_CONF=.*|DAEMON_CONF="/etc/hostapd/hostapd.conf"|' /etc/default/hostapd
    fi
    
    log "hostapd configured"
}

# Configure dnsmasq
configure_dnsmasq() {
    log "Configuring dnsmasq..."
    
    # Backup existing config
    [[ -f /etc/dnsmasq.conf ]] && mv /etc/dnsmasq.conf /etc/dnsmasq.conf.backup
    
    # Create dnsmasq config
    cat > /etc/dnsmasq.conf <<EOF
# Interface to listen on
interface=$AP_INTERFACE
bind-interfaces

# DHCP range
dhcp-range=${AP_SUBNET}.10,${AP_SUBNET}.200,255.255.255.0,24h

# Gateway
dhcp-option=3,${AP_SUBNET}.1

# DNS servers (Cloudflare)
dhcp-option=6,1.1.1.1,1.0.0.1

# Don't use /etc/resolv.conf
no-resolv
server=1.1.1.1
server=1.0.0.1

# Logging
log-queries
log-dhcp
EOF
    
    log "dnsmasq configured"
}

# Configure static IP for AP interface
configure_ap_interface() {
    log "Configuring AP interface static IP..."
    
    # Method depends on whether using systemd-networkd or dhcpcd
    if systemctl is-active --quiet systemd-networkd; then
        # Using systemd-networkd
        cat > /etc/systemd/network/10-${AP_INTERFACE}.network <<EOF
[Match]
Name=$AP_INTERFACE

[Network]
Address=${AP_SUBNET}.1/24
IPForward=yes
EOF
        systemctl restart systemd-networkd
    else
        # Using dhcpcd or other
        # Remove from dhcpcd control
        if [[ -f /etc/dhcpcd.conf ]]; then
            if ! grep -q "denyinterfaces $AP_INTERFACE" /etc/dhcpcd.conf; then
                echo "denyinterfaces $AP_INTERFACE" >> /etc/dhcpcd.conf
            fi
        fi
        
        # Set static IP via ip command (will persist with our systemd service)
        ip addr flush dev "$AP_INTERFACE"
        ip addr add ${AP_SUBNET}.1/24 dev "$AP_INTERFACE"
        ip link set "$AP_INTERFACE" up
    fi
    
    log "AP interface configured with IP ${AP_SUBNET}.1"
}

# Configure WireGuard
configure_wireguard() {
    log "Configuring WireGuard..."
    
    mkdir -p /etc/wireguard
    chmod 700 /etc/wireguard
    
    cat > /etc/wireguard/wg0.conf <<EOF
[Interface]
PrivateKey = $WG_CLIENT_PRIVATE_KEY
Address = $WG_CLIENT_ADDRESS
DNS = 1.1.1.1

# Routing rules - route AP traffic through VPN
PostUp = iptables -A FORWARD -i $AP_INTERFACE -o wg0 -j ACCEPT
PostUp = iptables -A FORWARD -i wg0 -o $AP_INTERFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
PostUp = iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE
PostUp = ip route add ${AP_SUBNET}.0/24 dev $AP_INTERFACE

PostDown = iptables -D FORWARD -i $AP_INTERFACE -o wg0 -j ACCEPT
PostDown = iptables -D FORWARD -i wg0 -o $AP_INTERFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
PostDown = iptables -t nat -D POSTROUTING -o wg0 -j MASQUERADE

[Peer]
PublicKey = $WG_SERVER_PUBLIC_KEY
Endpoint = $WG_SERVER_ENDPOINT
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF
    
    chmod 600 /etc/wireguard/wg0.conf
    
    log "WireGuard configured"
}

# Configure OpenVPN
configure_openvpn() {
    log "Configuring OpenVPN..."
    
    cp "$OVPN_CONFIG" /etc/openvpn/client.conf
    
    # Add routing rules to the config
    cat >> /etc/openvpn/client.conf <<EOF

# Custom routing for AP
script-security 2
up /etc/openvpn/up.sh
down /etc/openvpn/down.sh
EOF
    
    # Create up script
    cat > /etc/openvpn/up.sh <<EOF
#!/bin/bash
iptables -A FORWARD -i $AP_INTERFACE -o tun0 -j ACCEPT
iptables -A FORWARD -i tun0 -o $AP_INTERFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE
EOF
    
    # Create down script
    cat > /etc/openvpn/down.sh <<EOF
#!/bin/bash
iptables -D FORWARD -i $AP_INTERFACE -o tun0 -j ACCEPT
iptables -D FORWARD -i tun0 -o $AP_INTERFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -t nat -D POSTROUTING -o tun0 -j MASQUERADE
EOF
    
    chmod +x /etc/openvpn/up.sh /etc/openvpn/down.sh
    
    log "OpenVPN configured"
}

# Enable IP forwarding
enable_ip_forwarding() {
    log "Enabling IP forwarding..."
    
    # Enable immediately
    sysctl -w net.ipv4.ip_forward=1
    
    # Make persistent
    cat > /etc/sysctl.d/99-vpn-router.conf <<EOF
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
EOF
    
    sysctl -p /etc/sysctl.d/99-vpn-router.conf
    
    log "IP forwarding enabled"
}

# Create systemd service for initialization
create_init_service() {
    log "Creating initialization service..."
    
    cat > /etc/systemd/system/vpn-gateway-init.service <<EOF
[Unit]
Description=VPN Gateway Initialization
Before=hostapd.service dnsmasq.service
After=network-pre.target
Wants=network-pre.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/vpn-gateway-init.sh

[Install]
WantedBy=multi-user.target
EOF
    
    cat > /usr/local/bin/vpn-gateway-init.sh <<EOF
#!/bin/bash
# Ensure AP interface is up with correct IP
ip addr flush dev $AP_INTERFACE
ip addr add ${AP_SUBNET}.1/24 dev $AP_INTERFACE
ip link set $AP_INTERFACE up

# Wait for interface to be ready
sleep 2
EOF
    
    chmod +x /usr/local/bin/vpn-gateway-init.sh
    systemctl daemon-reload
    systemctl enable vpn-gateway-init.service
    
    log "Init service created"
}

# Enable and start services
enable_and_start_services() {
    log "Enabling and starting services..."
    
    # Stop any conflicting services
    systemctl stop wpa_supplicant 2>/dev/null || true
    systemctl disable wpa_supplicant 2>/dev/null || true
    
    # Start init service first
    systemctl enable --now vpn-gateway-init
    sleep 2
    
    # Start VPN
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        systemctl enable --now wg-quick@wg0
    else
        systemctl enable --now openvpn@client
    fi
    sleep 2
    
    # Start DHCP server
    systemctl enable --now dnsmasq
    sleep 1
    
    # Start access point (unmask first if needed)
    systemctl unmask hostapd
    systemctl enable --now hostapd
    
    log "Services enabled and started"
}

# Save iptables rules
save_iptables() {
    log "Saving iptables rules..."
    
    if command -v netfilter-persistent &> /dev/null; then
        netfilter-persistent save
    else
        iptables-save > /etc/iptables/rules.v4
    fi
    
    log "iptables rules saved"
}

# Display status
show_status() {
    echo ""
    echo "=========================================="
    echo "VPN Gateway Router Setup Complete!"
    echo "=========================================="
    echo ""
    echo "Configuration Summary:"
    echo "  AP Interface: $AP_INTERFACE"
    echo "  AP SSID: $AP_SSID"
    echo "  AP IP: ${AP_SUBNET}.1"
    echo "  DHCP Range: ${AP_SUBNET}.10 - ${AP_SUBNET}.200"
    echo "  WAN Interface: $WAN_INTERFACE"
    echo "  VPN Type: $VPN_TYPE"
    echo ""
    echo "Service Status:"
    systemctl is-active --quiet hostapd && echo "  hostapd: ✓ Running" || echo "  hostapd: ✗ Not running"
    systemctl is-active --quiet dnsmasq && echo "  dnsmasq: ✓ Running" || echo "  dnsmasq: ✗ Not running"
    
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        systemctl is-active --quiet wg-quick@wg0 && echo "  wireguard: ✓ Running" || echo "  wireguard: ✗ Not running"
        echo ""
        echo "WireGuard Status:"
        wg show 2>/dev/null || echo "  Not connected"
    else
        systemctl is-active --quiet openvpn@client && echo "  openvpn: ✓ Running" || echo "  openvpn: ✗ Not running"
    fi
    
    echo ""
    echo "Troubleshooting commands:"
    echo "  sudo systemctl status hostapd"
    echo "  sudo systemctl status dnsmasq"
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        echo "  sudo wg show"
        echo "  sudo systemctl status wg-quick@wg0"
    else
        echo "  sudo systemctl status openvpn@client"
    fi
    echo "  sudo journalctl -u hostapd -f"
    echo "  sudo iptables -t nat -L -n -v"
    echo ""
    echo "Configuration files:"
    echo "  /etc/hostapd/hostapd.conf"
    echo "  /etc/dnsmasq.conf"
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        echo "  /etc/wireguard/wg0.conf"
    else
        echo "  /etc/openvpn/client.conf"
    fi
    echo ""
    echo "Log file: $LOG_FILE"
    echo ""
}

# Main execution
main() {
    log "Starting VPN Gateway Router setup..."
    
    check_root
    detect_interfaces
    get_ap_config
    get_vpn_config
    
    echo ""
    read -p "Continue with installation? [Y/n]: " confirm
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        error "Installation cancelled by user"
    fi
    
    install_packages
    configure_ap_interface
    configure_hostapd
    configure_dnsmasq
    
    if [[ "$VPN_TYPE" == "wireguard" ]]; then
        configure_wireguard
    else
        configure_openvpn
    fi
    
    enable_ip_forwarding
    create_init_service
    enable_and_start_services
    save_iptables
    
    show_status
}

# Run main function
main "$@"
